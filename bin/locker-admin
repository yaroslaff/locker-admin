#!/usr/bin/env python3

import argparse
import os
import string
import datetime
import json
import random

def get_args():

    def_apps = os.getenv('LOCKER_APPS_PATH', '/opt/locker-apps')

    parser = argparse.ArgumentParser(description='Locker admin')
    g = parser.add_argument_group('server-side arguments')
    g.add_argument('--apps', default=def_apps, help='Path to apps ($LOCKER_APPS_PATH={})'.format(def_apps))
    g.add_argument('--create', metavar=('user', 'app_name'), nargs=2, help='Create application directory: --create user1 test')
    g.add_argument('-O', '--origin', metavar='Origin', nargs='+', dest='origins', help='Origins, e.g.: -O http://localhost:8000 https://example.com')

    return parser.parse_args()

def gen_key(length=40):
    alphabet = string.ascii_lowercase + string.ascii_uppercase + string.digits
    key = ''.join(random.choice(alphabet) for i in range(length))
    return key

def create(apps, user, name, origins):
    
    subdirs = ['etc', 'etc/skeleton', 'etc/skeleton/r', 'etc/skeleton/rw', 'home', 'var']

    print(f'Create app {name} in {apps}')
    if apps is None:
        print('set $LOCKER_APPS_PATH or --apps PATH to application directory')
        return

    if not os.path.isdir(apps):
        print(f'No apps_path. do: mkdir {apps} or specify correct --apps PATH')
        return

    userdir = os.path.join(apps, user) 
    appdir = os.path.join(apps, user, name) 

    if not os.path.isdir(userdir):
        os.mkdir(userdir)
    
    if os.path.isdir(appdir):
        print(f"{appdir} already exists. locker-admin will not delete it. do: rm -r {appdir}")
        return
    
    print("create", appdir)
    os.mkdir(appdir)
    for subdir in subdirs:
        dir = os.path.join(appdir, subdir)
        print("create", dir)
        os.mkdir(dir)
        # os.mkdir(os.path.join)


    print("Generate API key in etc/keys.json")
    # generate keys
    key = {
        'key': gen_key(),
        'comment': 'Initial key, generated by locker-admin',
        'created': datetime.datetime.now().strftime('%Y/%m/%d'),
        'touched': datetime.datetime.now().strftime('%Y/%m/%d'),
        'ip': []
    }

    with open(os.path.join(appdir, 'etc/keys.json'), 'w') as fh:
        json.dump(key, fh, indent=4)

    print("Generate etc/options.json")
    options = {
        'origins': [],
    	"query-options": [

            {
                "filter_method": "GET",                
                "headers": {
                    "Cache-Control": "no-cache, no-store, must-revalidate"
                }
            },

            {
                "filter_method": "PUT",
                "filter_path": "${HOME}/rw/",
                
                "options": {
                    "create": True,
                    "max_content_length": 1024,
                    "set_flag": {
                        "file": "flags.json",
                        "flag": "notebook"
                    }
                },
            }
	    ],
        "accept_new_users": True,
        "noregister_url": "http://google.com/",
        "#return_url": "http://notebook.sysattack.com:8000"
    }

    options['origins'].extend(origins)
    with open(os.path.join(appdir, 'etc/options.json'), 'w') as fh:
        json.dump(options, fh, indent=4)

    print("Generate etc/oidc_credentials.json")
    oidc_credentials = {
        "vendor": ["google"]
    }

    with open(os.path.join(appdir, 'etc/oidc_credentials.json'), 'w') as fh:
        json.dump(oidc_credentials, fh, indent=4)




def check_sanity(args):
    for origin in args.origins:
        if not origin.startswith('http://') and not origin.startswith('https://'):
            print(f"Origin {origin} must start with http:// or https://")
            return False            

        if origin.endswith('/'):
            print(f"Origin {origin} must-not end with slash")
            return False            

    return True

def main():
    args = get_args()
    print(args)

    if not check_sanity(args):
        return

    if args.create:
        create(apps=args.apps, user=args.create[0], name=args.create[1], origins=args.origins)

main()
